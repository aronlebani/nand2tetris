// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

	// Instruction pins
	Thru(in=instruction[0], out=j3);
	Thru(in=instruction[1], out=j2);
	Thru(in=instruction[2], out=j1);
	Thru(in=instruction[3], out=d3);
	Thru(in=instruction[4], out=d2);
	Thru(in=instruction[5], out=d1);
	Thru(in=instruction[6], out=c6);
	Thru(in=instruction[7], out=c5);
	Thru(in=instruction[8], out=c4);
	Thru(in=instruction[9], out=c3);
	Thru(in=instruction[10], out=c2);
	Thru(in=instruction[11], out=c1);
	Thru(in=instruction[12], out=a);
	Thru(in=instruction[15], out=cinstr);
	Not(in=cinstr, out=ainstr0, out=ainstr1);

	// Decide if it's an A instruction or a C instruction
	Mux16(a=outM0, b=instruction, sel=ainstr1, out=intoA);

	// A Register
	Or(a=d1, b=ainstr0, out=loadA); // Load A if it's an A instruction or if d1 bit is set
	ARegister(in=intoA, load=loadA, out=A0, out=A1, out[0..14]=addressM);
	
	// D register
	And(a=d2, b=cinstr, out=loadD); // Load D if it's a C instruction and d2 bit is set
	DRegister(in=outM1, load=loadD, out=D);
	
	// Decide whether to use A or M using the a bit
	Mux16(a=A0, b=inM, sel=a, out=AM);

	// Load M if it's a C instruction and d3 is set
	And(a=cinstr, b=d3, out=writeM);

	// ALU
	ALU(x=D, y=AM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outM, out=outM0, out=outM1, zr=zr, ng=ng);

	// Jump logic
	Not(in=ng, out=notng);
	Not(in=zr, out=notzr);
	And(a=notng, b=notzr, out=gt);
	Or(a=notng, b=zr, out=ge);
	And(a=ng, b=notzr, out=lt);
	Or(a=ng, b=zr, out=le);
	Mux8Way(a=false, b=gt, c=zr, d=ge, e=lt, f=notzr, g=le, h=true, sel[0]=j3, sel[1]=j2, sel[2]=j1, out=jmp);

	// Program counter
	And(a=jmp, b=cinstr, out=loadPC); // Jump if a C instruction and the jmp pin is asserted
	PC(in=A1, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}
